1)stringizing operator 

#define name(s) #s
int main()
{
    printf(name(gokul));
}

2)call back function

int addition(int x , int y);
int substraction(int x, int y);
void(*fun_ptr)(int,int);
int main()
{
    int a,b,value;
printf("enter two numbers\n");
scanf("%d%d",&a,&b);
printf("enter value : 1 for addition \n 2 for substraction\n");
scanf("%d",&value);
switch(value)
{
case 1:
    fun_ptr=addition;
    break;
case 2:
    fun_ptr = substraction;
    break;
}
fun_ptr(a,b);
}

int addition(int x,int y)
{
    int a=x+y;
    printf("sum is :%d\n",a);
}
int substraction(int x,int y)
{
    int a=x-y;
    printf("value is :%d\n",a);
}

3)dynamic pointer

int main()
{
    int n,*p,i;
    printf("enter total number of elements");
    scanf("%d",&n);
    p=(int *)malloc(n*sizeof(n));
    for(i=0;i<n;i++)
    {
        scanf("%d",p+i);
    }
    for(i=0;i<n;i++){
        printf("value is:%d\n",p[i]);
    }
}

4)ascending order

int main()
{
    int i,j,num[50],total,temp;
    printf("enter the total numbers");
    scanf("%d",&total);
    printf("enter the numbers");
    for(i=0;i<total;i++){
        scanf("%d",&num[i]);
    }
    for(i=0;i<total;i++){
        for(j=i+1;j<total;j++){
           if(num[i]<num[j]){
            temp=num[i];
            num[i]=num[j];
            num[j]=temp;
           }
           }
printf("%d",num[i]);
    }

}
5) factorial using recursion

int factorial(int n)
{
   if(n==0){
    return(1);
   }
else{
        int f=n*factorial(n-1);
        return f;
}
}
int main()
{
    int fact, num;
    printf("enter the number");
    scanf("%d",&num);
     fact=factorial(num);

     printf("factorial is %d",fact);
}

//ascending values using dynamic memory
int main()
{
    int n,*p,i,j,temp;
    printf("enter the total number of elements");
    scanf("%d",&n);
    p=(int *)malloc(n*sizeof(n));
    for(i=0;i<n;i++){
        scanf("%d",p+i);
    }

    printf("the ascending values are:\n");

    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(p[i]>p[j])
            {
              temp=p[i];
              p[i]=p[j];
              p[j]=temp;
            }
        }
        printf("%d\n",p[i]);
    }
}

//without using return
int add(int *x,int *y)
{
    int *c;
    c=*x+*y;
}

int main()
{
    int a,b,c;
    printf("enter 2 values for adding");
    scanf("%d%d",&a,&b);
    c=add(&a,&b);
    printf("value is:%d",c);
}

//concatenation using strcat
int main()
{
    char str1[]="iam";
    char str2[]="gokul";
    strcat(str1,str2);

    printf("after concatenation:%s\n",str1);
}

without string func:
int main()
{
    char str1[20];
    char str2[20];
    int i,j,n=0,m=0,l;
    printf("enter the first string");
    scanf("%s",&str1);
    printf("enter the second string");
    scanf("%s",&str2);
    for(int i=0;str1[i]!='\0';i++)
    {
    n=n+1;
    }

    for( int i=0;str2[i]!='\0';i++)
    {
    m=m+1;
    }
    l=m+n;
    for(i=n;i<l;i++)
    {
    j=i-n;
    str1[i]=str2[j];
    }
   for(i=0;i<l;i++)
   {
   printf("%c",str1[i]);
}
}

structure:

struct class
{
    int rollno;
    float marks;
}s1;

int main()
{
    s1.rollno=10;
    s1.marks=45.5;
    printf("roll number is:%d\n",s1.rollno);
    printf("mark is:%f",s1.marks);
}

